name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    services:
      milvus:
        image: milvusdb/milvus:v2.3.2
        ports:
          - 19530:19530
        options: --health-cmd "curl -f http://localhost:9091/healthz" --health-interval 30s --health-timeout 20s --health-retries 3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Code formatting check (Black)
      run: black --check --diff src/ tests/
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff src/ tests/
    
    - name: Linting (Ruff)
      run: ruff check src/ tests/
    
    - name: Type checking (MyPy)
      run: mypy src/ --ignore-missing-imports
    
    - name: Security check (Bandit)
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
    
    - name: Run tests
      env:
        API_KEY: test-key
        GCP_PROJECT_ID: test-project
        MILVUS_HOST: localhost
        MILVUS_PORT: 19530
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Schema validation test
      run: |
        python -m pytest tests/test_schemas.py -v
    
    - name: Generate OpenAPI spec
      run: |
        python scripts/generate_openapi.py
    
    - name: Upload OpenAPI spec
      uses: actions/upload-artifact@v3
      with:
        name: openapi-spec
        path: docs/openapi.json

  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/fastapi.Dockerfile
        push: false
        tags: legal-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-api -p 8000:8000 -e API_KEY=test legal-api:test
        sleep 10
        curl -f http://localhost:8000/healthz || exit 1
        docker stop test-api

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Deploy to Cloud Run (Staging)
      run: |
        gcloud run deploy legal-api-staging \
          --source . \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars="DEBUG=false,USE_SECRET_MANAGER=true" \
          --memory=2Gi \
          --cpu=2 \
          --timeout=300 \
          --max-instances=10
